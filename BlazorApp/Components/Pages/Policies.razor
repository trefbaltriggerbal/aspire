@page "/policies"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Client")]
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Generic
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext Db

<PageTitle>Policies</PageTitle>

<h1>Policies</h1>

@if (policies == null)
{
    <p><em>Loading...</em></p>
}
else if (policies.Count == 0)
{
    <p>No policies found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr><th>Number</th><th>Description</th><th>Start</th><th>End</th></tr>
        </thead>
        <tbody>
@foreach (var p in policies)
        {
            <tr>
                <td>@p.PolicyNumber</td>
                <td>@p.Description</td>
                <td>@p.StartDate.ToShortDateString()</td>
                <td>@p.EndDate.ToShortDateString()</td>
            </tr>
            @if (p.Claims?.Count > 0)
            {
                <tr>
                    <td colspan="4">
                        <table class="table table-sm ms-3">
                            <thead>
                                <tr><th>Description</th><th>Date</th><th>Status</th></tr>
                            </thead>
                            <tbody>
                            @foreach (var c in p.Claims)
                            {
                                <tr>
                                    <td>@c.Description</td>
                                    <td>@c.IncidentDate.ToShortDateString()</td>
                                    <td>@c.Status</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
            <tr>
                <td colspan="4">
                    <button class="btn btn-sm btn-primary" @onclick="() => ToggleForm(p.Id)">Add Claim</button>
                    @if (formPolicyId == p.Id)
                    {
                        <EditForm Model="newClaim" OnValidSubmit="() => AddClaim(p.Id)" class="mt-2">
                            <div class="row g-2">
                                <div class="col-md-5">
                                    <InputText @bind-Value="newClaim.Description" class="form-control" placeholder="Description" />
                                </div>
                                <div class="col-md-3">
                                    <InputDate @bind-Value="newClaim.IncidentDate" class="form-control"
                                               AdditionalAttributes="@(new Dictionary<string, object> { ["placeholder"] = "Date" })" />
                                </div>
                                <div class="col-md-2">
                                    <InputText @bind-Value="newClaim.Status" class="form-control" placeholder="Status" />
                                </div>
                                <div class="col-md-2">
                                    <button type="submit" class="btn btn-success btn-sm">Save</button>
                                </div>
                            </div>
                        </EditForm>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Policy>? policies;
    private int? formPolicyId;
    private InsuranceClaim newClaim = new() { IncidentDate = DateTime.Today, Status = "Open" };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user != null)
        {
            policies = await Db.Policies
                .Where(p => p.UserId == user.Id)
                .Include(p => p.Claims)
                .ToListAsync();
        }
    }

    private void ToggleForm(int policyId)
    {
        if (formPolicyId == policyId)
        {
            formPolicyId = null;
        }
        else
        {
            formPolicyId = policyId;
            newClaim = new() { IncidentDate = DateTime.Today, Status = "Open" };
        }
    }

    private async Task AddClaim(int policyId)
    {
        newClaim.PolicyId = policyId;
        Db.InsuranceClaims.Add(newClaim);
        await Db.SaveChangesAsync();

        var policy = policies?.FirstOrDefault(p => p.Id == policyId);
        if (policy != null)
        {
            policy.Claims.Add(newClaim);
        }

        formPolicyId = null;
        newClaim = new() { IncidentDate = DateTime.Today, Status = "Open" };
    }
}
